# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IoK8sApiAppsV1beta2DaemonSetSpec <: SwaggerModel
    minReadySeconds::Union{ Nothing, Int32 } # minReadySeconds
    revisionHistoryLimit::Union{ Nothing, Int32 } # revisionHistoryLimit
    selector::Union{ Nothing, IoK8sApimachineryPkgApisMetaV1LabelSelector } # selector
    template::Union{ Nothing, IoK8sApiCoreV1PodTemplateSpec } # template
    updateStrategy::Union{ Nothing, IoK8sApiAppsV1beta2DaemonSetUpdateStrategy } # updateStrategy

    function IoK8sApiAppsV1beta2DaemonSetSpec(;minReadySeconds=nothing, revisionHistoryLimit=nothing, selector=nothing, template=nothing, updateStrategy=nothing)
        o = new()
        set_field!(o, :minReadySeconds, minReadySeconds)
        set_field!(o, :revisionHistoryLimit, revisionHistoryLimit)
        set_field!(o, :selector, selector)
        set_field!(o, :template, template)
        set_field!(o, :updateStrategy, updateStrategy)
        o
    end
end # type IoK8sApiAppsV1beta2DaemonSetSpec

const _name_map_IoK8sApiAppsV1beta2DaemonSetSpec = Dict{String,Symbol}(["minReadySeconds"=>:minReadySeconds, "revisionHistoryLimit"=>:revisionHistoryLimit, "selector"=>:selector, "template"=>:template, "updateStrategy"=>:updateStrategy])
const _field_map_IoK8sApiAppsV1beta2DaemonSetSpec = Dict{Symbol,String}([:minReadySeconds=>"minReadySeconds", :revisionHistoryLimit=>"revisionHistoryLimit", :selector=>"selector", :template=>"template", :updateStrategy=>"updateStrategy"])
Swagger.name_map(::Type{ IoK8sApiAppsV1beta2DaemonSetSpec }) = _name_map_IoK8sApiAppsV1beta2DaemonSetSpec
Swagger.field_map(::Type{ IoK8sApiAppsV1beta2DaemonSetSpec }) = _field_map_IoK8sApiAppsV1beta2DaemonSetSpec

function check_required(o::IoK8sApiAppsV1beta2DaemonSetSpec)
    (o.selector === nothing) && (return false)
    (o.template === nothing) && (return false)
    true
end

function validate_field(o::IoK8sApiAppsV1beta2DaemonSetSpec, name::Symbol, val)
end
