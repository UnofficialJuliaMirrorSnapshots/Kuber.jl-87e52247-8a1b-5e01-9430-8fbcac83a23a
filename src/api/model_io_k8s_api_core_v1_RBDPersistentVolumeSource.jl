# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IoK8sApiCoreV1RBDPersistentVolumeSource <: SwaggerModel
    fsType::Union{ Nothing, String } # fsType
    image::Union{ Nothing, String } # image
    keyring::Union{ Nothing, String } # keyring
    monitors::Union{ Nothing, Vector{String} } # monitors
    pool::Union{ Nothing, String } # pool
    readOnly::Union{ Nothing, Bool } # readOnly
    secretRef::Union{ Nothing, IoK8sApiCoreV1SecretReference } # secretRef
    user::Union{ Nothing, String } # user

    function IoK8sApiCoreV1RBDPersistentVolumeSource(;fsType=nothing, image=nothing, keyring=nothing, monitors=nothing, pool=nothing, readOnly=nothing, secretRef=nothing, user=nothing)
        o = new()
        set_field!(o, :fsType, fsType)
        set_field!(o, :image, image)
        set_field!(o, :keyring, keyring)
        set_field!(o, :monitors, monitors)
        set_field!(o, :pool, pool)
        set_field!(o, :readOnly, readOnly)
        set_field!(o, :secretRef, secretRef)
        set_field!(o, :user, user)
        o
    end
end # type IoK8sApiCoreV1RBDPersistentVolumeSource

const _name_map_IoK8sApiCoreV1RBDPersistentVolumeSource = Dict{String,Symbol}(["fsType"=>:fsType, "image"=>:image, "keyring"=>:keyring, "monitors"=>:monitors, "pool"=>:pool, "readOnly"=>:readOnly, "secretRef"=>:secretRef, "user"=>:user])
const _field_map_IoK8sApiCoreV1RBDPersistentVolumeSource = Dict{Symbol,String}([:fsType=>"fsType", :image=>"image", :keyring=>"keyring", :monitors=>"monitors", :pool=>"pool", :readOnly=>"readOnly", :secretRef=>"secretRef", :user=>"user"])
Swagger.name_map(::Type{ IoK8sApiCoreV1RBDPersistentVolumeSource }) = _name_map_IoK8sApiCoreV1RBDPersistentVolumeSource
Swagger.field_map(::Type{ IoK8sApiCoreV1RBDPersistentVolumeSource }) = _field_map_IoK8sApiCoreV1RBDPersistentVolumeSource

function check_required(o::IoK8sApiCoreV1RBDPersistentVolumeSource)
    (o.image === nothing) && (return false)
    (o.monitors === nothing) && (return false)
    true
end

function validate_field(o::IoK8sApiCoreV1RBDPersistentVolumeSource, name::Symbol, val)
end
