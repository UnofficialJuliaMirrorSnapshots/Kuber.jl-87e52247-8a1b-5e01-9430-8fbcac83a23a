# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps <: SwaggerModel
    ref::Union{ Nothing, String } # \$ref
    schema::Union{ Nothing, String } # \$schema
    additionalItems::Union{ Nothing, String } # additionalItems
    additionalProperties::Union{ Nothing, String } # additionalProperties
    allOf::Union{ Nothing, Vector{String} } # allOf
    anyOf::Union{ Nothing, Vector{String} } # anyOf
    default::Union{ Nothing, String } # default
    definitions::Union{ Nothing, Dict{String, String} } # definitions
    dependencies::Union{ Nothing, Dict{String, String} } # dependencies
    description::Union{ Nothing, String } # description
    enum::Union{ Nothing, Vector{String} } # enum
    example::Union{ Nothing, String } # example
    exclusiveMaximum::Union{ Nothing, Bool } # exclusiveMaximum
    exclusiveMinimum::Union{ Nothing, Bool } # exclusiveMinimum
    externalDocs::Union{ Nothing, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation } # externalDocs
    format::Union{ Nothing, String } # format
    id::Union{ Nothing, String } # id
    items::Union{ Nothing, String } # items
    maxItems::Union{ Nothing, Int64 } # maxItems
    maxLength::Union{ Nothing, Int64 } # maxLength
    maxProperties::Union{ Nothing, Int64 } # maxProperties
    maximum::Union{ Nothing, Float64 } # maximum
    minItems::Union{ Nothing, Int64 } # minItems
    minLength::Union{ Nothing, Int64 } # minLength
    minProperties::Union{ Nothing, Int64 } # minProperties
    minimum::Union{ Nothing, Float64 } # minimum
    multipleOf::Union{ Nothing, Float64 } # multipleOf
    not::Union{ Nothing, String } # not
    oneOf::Union{ Nothing, Vector{String} } # oneOf
    pattern::Union{ Nothing, String } # pattern
    patternProperties::Union{ Nothing, Dict{String, String} } # patternProperties
    properties::Union{ Nothing, Dict{String, String} } # properties
    required::Union{ Nothing, Vector{String} } # required
    title::Union{ Nothing, String } # title
    _type::Union{ Nothing, String } # type
    uniqueItems::Union{ Nothing, Bool } # uniqueItems

    function IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps(;ref=nothing, schema=nothing, additionalItems=nothing, additionalProperties=nothing, allOf=nothing, anyOf=nothing, default=nothing, definitions=nothing, dependencies=nothing, description=nothing, enum=nothing, example=nothing, exclusiveMaximum=nothing, exclusiveMinimum=nothing, externalDocs=nothing, format=nothing, id=nothing, items=nothing, maxItems=nothing, maxLength=nothing, maxProperties=nothing, maximum=nothing, minItems=nothing, minLength=nothing, minProperties=nothing, minimum=nothing, multipleOf=nothing, not=nothing, oneOf=nothing, pattern=nothing, patternProperties=nothing, properties=nothing, required=nothing, title=nothing, _type=nothing, uniqueItems=nothing)
        o = new()
        set_field!(o, :ref, ref)
        set_field!(o, :schema, schema)
        set_field!(o, :additionalItems, additionalItems)
        set_field!(o, :additionalProperties, additionalProperties)
        set_field!(o, :allOf, allOf)
        set_field!(o, :anyOf, anyOf)
        set_field!(o, :default, default)
        set_field!(o, :definitions, definitions)
        set_field!(o, :dependencies, dependencies)
        set_field!(o, :description, description)
        set_field!(o, :enum, enum)
        set_field!(o, :example, example)
        set_field!(o, :exclusiveMaximum, exclusiveMaximum)
        set_field!(o, :exclusiveMinimum, exclusiveMinimum)
        set_field!(o, :externalDocs, externalDocs)
        set_field!(o, :format, format)
        set_field!(o, :id, id)
        set_field!(o, :items, items)
        set_field!(o, :maxItems, maxItems)
        set_field!(o, :maxLength, maxLength)
        set_field!(o, :maxProperties, maxProperties)
        set_field!(o, :maximum, maximum)
        set_field!(o, :minItems, minItems)
        set_field!(o, :minLength, minLength)
        set_field!(o, :minProperties, minProperties)
        set_field!(o, :minimum, minimum)
        set_field!(o, :multipleOf, multipleOf)
        set_field!(o, :not, not)
        set_field!(o, :oneOf, oneOf)
        set_field!(o, :pattern, pattern)
        set_field!(o, :patternProperties, patternProperties)
        set_field!(o, :properties, properties)
        set_field!(o, :required, required)
        set_field!(o, :title, title)
        set_field!(o, :_type, _type)
        set_field!(o, :uniqueItems, uniqueItems)
        o
    end
end # type IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps

const _name_map_IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps = Dict{String,Symbol}(["\$ref"=>:ref, "\$schema"=>:schema, "additionalItems"=>:additionalItems, "additionalProperties"=>:additionalProperties, "allOf"=>:allOf, "anyOf"=>:anyOf, "default"=>:default, "definitions"=>:definitions, "dependencies"=>:dependencies, "description"=>:description, "enum"=>:enum, "example"=>:example, "exclusiveMaximum"=>:exclusiveMaximum, "exclusiveMinimum"=>:exclusiveMinimum, "externalDocs"=>:externalDocs, "format"=>:format, "id"=>:id, "items"=>:items, "maxItems"=>:maxItems, "maxLength"=>:maxLength, "maxProperties"=>:maxProperties, "maximum"=>:maximum, "minItems"=>:minItems, "minLength"=>:minLength, "minProperties"=>:minProperties, "minimum"=>:minimum, "multipleOf"=>:multipleOf, "not"=>:not, "oneOf"=>:oneOf, "pattern"=>:pattern, "patternProperties"=>:patternProperties, "properties"=>:properties, "required"=>:required, "title"=>:title, "type"=>:_type, "uniqueItems"=>:uniqueItems])
const _field_map_IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps = Dict{Symbol,String}([:ref=>"\$ref", :schema=>"\$schema", :additionalItems=>"additionalItems", :additionalProperties=>"additionalProperties", :allOf=>"allOf", :anyOf=>"anyOf", :default=>"default", :definitions=>"definitions", :dependencies=>"dependencies", :description=>"description", :enum=>"enum", :example=>"example", :exclusiveMaximum=>"exclusiveMaximum", :exclusiveMinimum=>"exclusiveMinimum", :externalDocs=>"externalDocs", :format=>"format", :id=>"id", :items=>"items", :maxItems=>"maxItems", :maxLength=>"maxLength", :maxProperties=>"maxProperties", :maximum=>"maximum", :minItems=>"minItems", :minLength=>"minLength", :minProperties=>"minProperties", :minimum=>"minimum", :multipleOf=>"multipleOf", :not=>"not", :oneOf=>"oneOf", :pattern=>"pattern", :patternProperties=>"patternProperties", :properties=>"properties", :required=>"required", :title=>"title", :_type=>"type", :uniqueItems=>"uniqueItems"])
Swagger.name_map(::Type{ IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps }) = _name_map_IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps
Swagger.field_map(::Type{ IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps }) = _field_map_IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps

function check_required(o::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps)
    true
end

function validate_field(o::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps, name::Symbol, val)
end
