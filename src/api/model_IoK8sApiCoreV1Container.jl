# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct IoK8sApiCoreV1Container <: SwaggerModel
    args::Any # spec type: Union{ Nothing, Vector{String} } # spec name: args
    command::Any # spec type: Union{ Nothing, Vector{String} } # spec name: command
    env::Any # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1EnvVar} } # spec name: env
    envFrom::Any # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1EnvFromSource} } # spec name: envFrom
    image::Any # spec type: Union{ Nothing, String } # spec name: image
    imagePullPolicy::Any # spec type: Union{ Nothing, String } # spec name: imagePullPolicy
    lifecycle::Any # spec type: Union{ Nothing, IoK8sApiCoreV1Lifecycle } # spec name: lifecycle
    livenessProbe::Any # spec type: Union{ Nothing, IoK8sApiCoreV1Probe } # spec name: livenessProbe
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    ports::Any # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1ContainerPort} } # spec name: ports
    readinessProbe::Any # spec type: Union{ Nothing, IoK8sApiCoreV1Probe } # spec name: readinessProbe
    resources::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ResourceRequirements } # spec name: resources
    securityContext::Any # spec type: Union{ Nothing, IoK8sApiCoreV1SecurityContext } # spec name: securityContext
    stdin::Any # spec type: Union{ Nothing, Bool } # spec name: stdin
    stdinOnce::Any # spec type: Union{ Nothing, Bool } # spec name: stdinOnce
    terminationMessagePath::Any # spec type: Union{ Nothing, String } # spec name: terminationMessagePath
    terminationMessagePolicy::Any # spec type: Union{ Nothing, String } # spec name: terminationMessagePolicy
    tty::Any # spec type: Union{ Nothing, Bool } # spec name: tty
    volumeDevices::Any # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1VolumeDevice} } # spec name: volumeDevices
    volumeMounts::Any # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1VolumeMount} } # spec name: volumeMounts
    workingDir::Any # spec type: Union{ Nothing, String } # spec name: workingDir

    function IoK8sApiCoreV1Container(;args=nothing, command=nothing, env=nothing, envFrom=nothing, image=nothing, imagePullPolicy=nothing, lifecycle=nothing, livenessProbe=nothing, name=nothing, ports=nothing, readinessProbe=nothing, resources=nothing, securityContext=nothing, stdin=nothing, stdinOnce=nothing, terminationMessagePath=nothing, terminationMessagePolicy=nothing, tty=nothing, volumeDevices=nothing, volumeMounts=nothing, workingDir=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1Container, Symbol("args"), args)
        setfield!(o, Symbol("args"), args)
        validate_property(IoK8sApiCoreV1Container, Symbol("command"), command)
        setfield!(o, Symbol("command"), command)
        validate_property(IoK8sApiCoreV1Container, Symbol("env"), env)
        setfield!(o, Symbol("env"), env)
        validate_property(IoK8sApiCoreV1Container, Symbol("envFrom"), envFrom)
        setfield!(o, Symbol("envFrom"), envFrom)
        validate_property(IoK8sApiCoreV1Container, Symbol("image"), image)
        setfield!(o, Symbol("image"), image)
        validate_property(IoK8sApiCoreV1Container, Symbol("imagePullPolicy"), imagePullPolicy)
        setfield!(o, Symbol("imagePullPolicy"), imagePullPolicy)
        validate_property(IoK8sApiCoreV1Container, Symbol("lifecycle"), lifecycle)
        setfield!(o, Symbol("lifecycle"), lifecycle)
        validate_property(IoK8sApiCoreV1Container, Symbol("livenessProbe"), livenessProbe)
        setfield!(o, Symbol("livenessProbe"), livenessProbe)
        validate_property(IoK8sApiCoreV1Container, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(IoK8sApiCoreV1Container, Symbol("ports"), ports)
        setfield!(o, Symbol("ports"), ports)
        validate_property(IoK8sApiCoreV1Container, Symbol("readinessProbe"), readinessProbe)
        setfield!(o, Symbol("readinessProbe"), readinessProbe)
        validate_property(IoK8sApiCoreV1Container, Symbol("resources"), resources)
        setfield!(o, Symbol("resources"), resources)
        validate_property(IoK8sApiCoreV1Container, Symbol("securityContext"), securityContext)
        setfield!(o, Symbol("securityContext"), securityContext)
        validate_property(IoK8sApiCoreV1Container, Symbol("stdin"), stdin)
        setfield!(o, Symbol("stdin"), stdin)
        validate_property(IoK8sApiCoreV1Container, Symbol("stdinOnce"), stdinOnce)
        setfield!(o, Symbol("stdinOnce"), stdinOnce)
        validate_property(IoK8sApiCoreV1Container, Symbol("terminationMessagePath"), terminationMessagePath)
        setfield!(o, Symbol("terminationMessagePath"), terminationMessagePath)
        validate_property(IoK8sApiCoreV1Container, Symbol("terminationMessagePolicy"), terminationMessagePolicy)
        setfield!(o, Symbol("terminationMessagePolicy"), terminationMessagePolicy)
        validate_property(IoK8sApiCoreV1Container, Symbol("tty"), tty)
        setfield!(o, Symbol("tty"), tty)
        validate_property(IoK8sApiCoreV1Container, Symbol("volumeDevices"), volumeDevices)
        setfield!(o, Symbol("volumeDevices"), volumeDevices)
        validate_property(IoK8sApiCoreV1Container, Symbol("volumeMounts"), volumeMounts)
        setfield!(o, Symbol("volumeMounts"), volumeMounts)
        validate_property(IoK8sApiCoreV1Container, Symbol("workingDir"), workingDir)
        setfield!(o, Symbol("workingDir"), workingDir)
        o
    end
end # type IoK8sApiCoreV1Container

const _property_map_IoK8sApiCoreV1Container = Dict{Symbol,Symbol}(Symbol("args")=>Symbol("args"), Symbol("command")=>Symbol("command"), Symbol("env")=>Symbol("env"), Symbol("envFrom")=>Symbol("envFrom"), Symbol("image")=>Symbol("image"), Symbol("imagePullPolicy")=>Symbol("imagePullPolicy"), Symbol("lifecycle")=>Symbol("lifecycle"), Symbol("livenessProbe")=>Symbol("livenessProbe"), Symbol("name")=>Symbol("name"), Symbol("ports")=>Symbol("ports"), Symbol("readinessProbe")=>Symbol("readinessProbe"), Symbol("resources")=>Symbol("resources"), Symbol("securityContext")=>Symbol("securityContext"), Symbol("stdin")=>Symbol("stdin"), Symbol("stdinOnce")=>Symbol("stdinOnce"), Symbol("terminationMessagePath")=>Symbol("terminationMessagePath"), Symbol("terminationMessagePolicy")=>Symbol("terminationMessagePolicy"), Symbol("tty")=>Symbol("tty"), Symbol("volumeDevices")=>Symbol("volumeDevices"), Symbol("volumeMounts")=>Symbol("volumeMounts"), Symbol("workingDir")=>Symbol("workingDir"))
const _property_types_IoK8sApiCoreV1Container = Dict{Symbol,String}(Symbol("args")=>"Vector{String}", Symbol("command")=>"Vector{String}", Symbol("env")=>"Vector{IoK8sApiCoreV1EnvVar}", Symbol("envFrom")=>"Vector{IoK8sApiCoreV1EnvFromSource}", Symbol("image")=>"String", Symbol("imagePullPolicy")=>"String", Symbol("lifecycle")=>"IoK8sApiCoreV1Lifecycle", Symbol("livenessProbe")=>"IoK8sApiCoreV1Probe", Symbol("name")=>"String", Symbol("ports")=>"Vector{IoK8sApiCoreV1ContainerPort}", Symbol("readinessProbe")=>"IoK8sApiCoreV1Probe", Symbol("resources")=>"IoK8sApiCoreV1ResourceRequirements", Symbol("securityContext")=>"IoK8sApiCoreV1SecurityContext", Symbol("stdin")=>"Bool", Symbol("stdinOnce")=>"Bool", Symbol("terminationMessagePath")=>"String", Symbol("terminationMessagePolicy")=>"String", Symbol("tty")=>"Bool", Symbol("volumeDevices")=>"Vector{IoK8sApiCoreV1VolumeDevice}", Symbol("volumeMounts")=>"Vector{IoK8sApiCoreV1VolumeMount}", Symbol("workingDir")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1Container }) = collect(keys(_property_map_IoK8sApiCoreV1Container))
Swagger.property_type(::Type{ IoK8sApiCoreV1Container }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_IoK8sApiCoreV1Container[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1Container }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1Container[property_name]

function check_required(o::IoK8sApiCoreV1Container)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1Container }, name::Symbol, val)
end
