# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IoK8sApiCoreV1Event <: SwaggerModel
    action::Union{ Nothing, String } # action
    apiVersion::Union{ Nothing, String } # apiVersion
    count::Union{ Nothing, Int32 } # count
    eventTime::Union{ Nothing, IoK8sApimachineryPkgApisMetaV1MicroTime } # eventTime
    firstTimestamp::Union{ Nothing, IoK8sApimachineryPkgApisMetaV1Time } # firstTimestamp
    involvedObject::Union{ Nothing, IoK8sApiCoreV1ObjectReference } # involvedObject
    kind::Union{ Nothing, String } # kind
    lastTimestamp::Union{ Nothing, IoK8sApimachineryPkgApisMetaV1Time } # lastTimestamp
    message::Union{ Nothing, String } # message
    metadata::Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta } # metadata
    reason::Union{ Nothing, String } # reason
    related::Union{ Nothing, IoK8sApiCoreV1ObjectReference } # related
    reportingComponent::Union{ Nothing, String } # reportingComponent
    reportingInstance::Union{ Nothing, String } # reportingInstance
    series::Union{ Nothing, IoK8sApiCoreV1EventSeries } # series
    source::Union{ Nothing, IoK8sApiCoreV1EventSource } # source
    _type::Union{ Nothing, String } # type

    function IoK8sApiCoreV1Event(;action=nothing, apiVersion=nothing, count=nothing, eventTime=nothing, firstTimestamp=nothing, involvedObject=nothing, kind=nothing, lastTimestamp=nothing, message=nothing, metadata=nothing, reason=nothing, related=nothing, reportingComponent=nothing, reportingInstance=nothing, series=nothing, source=nothing, _type=nothing)
        o = new()
        set_field!(o, :action, action)
        set_field!(o, :apiVersion, apiVersion)
        set_field!(o, :count, count)
        set_field!(o, :eventTime, eventTime)
        set_field!(o, :firstTimestamp, firstTimestamp)
        set_field!(o, :involvedObject, involvedObject)
        set_field!(o, :kind, kind)
        set_field!(o, :lastTimestamp, lastTimestamp)
        set_field!(o, :message, message)
        set_field!(o, :metadata, metadata)
        set_field!(o, :reason, reason)
        set_field!(o, :related, related)
        set_field!(o, :reportingComponent, reportingComponent)
        set_field!(o, :reportingInstance, reportingInstance)
        set_field!(o, :series, series)
        set_field!(o, :source, source)
        set_field!(o, :_type, _type)
        o
    end
end # type IoK8sApiCoreV1Event

const _name_map_IoK8sApiCoreV1Event = Dict{String,Symbol}(["action"=>:action, "apiVersion"=>:apiVersion, "count"=>:count, "eventTime"=>:eventTime, "firstTimestamp"=>:firstTimestamp, "involvedObject"=>:involvedObject, "kind"=>:kind, "lastTimestamp"=>:lastTimestamp, "message"=>:message, "metadata"=>:metadata, "reason"=>:reason, "related"=>:related, "reportingComponent"=>:reportingComponent, "reportingInstance"=>:reportingInstance, "series"=>:series, "source"=>:source, "type"=>:_type])
const _field_map_IoK8sApiCoreV1Event = Dict{Symbol,String}([:action=>"action", :apiVersion=>"apiVersion", :count=>"count", :eventTime=>"eventTime", :firstTimestamp=>"firstTimestamp", :involvedObject=>"involvedObject", :kind=>"kind", :lastTimestamp=>"lastTimestamp", :message=>"message", :metadata=>"metadata", :reason=>"reason", :related=>"related", :reportingComponent=>"reportingComponent", :reportingInstance=>"reportingInstance", :series=>"series", :source=>"source", :_type=>"type"])
Swagger.name_map(::Type{ IoK8sApiCoreV1Event }) = _name_map_IoK8sApiCoreV1Event
Swagger.field_map(::Type{ IoK8sApiCoreV1Event }) = _field_map_IoK8sApiCoreV1Event

function check_required(o::IoK8sApiCoreV1Event)
    (o.involvedObject === nothing) && (return false)
    (o.metadata === nothing) && (return false)
    true
end

function validate_field(o::IoK8sApiCoreV1Event, name::Symbol, val)
end
