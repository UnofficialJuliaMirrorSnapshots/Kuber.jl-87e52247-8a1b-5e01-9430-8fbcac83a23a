# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct IoK8sApiEventsV1beta1EventSeries <: SwaggerModel
    count::Any # spec type: Union{ Nothing, Int32 } # spec name: count
    lastObservedTime::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1MicroTime } # spec name: lastObservedTime
    state::Any # spec type: Union{ Nothing, String } # spec name: state

    function IoK8sApiEventsV1beta1EventSeries(;count=nothing, lastObservedTime=nothing, state=nothing)
        o = new()
        validate_property(IoK8sApiEventsV1beta1EventSeries, Symbol("count"), count)
        setfield!(o, Symbol("count"), count)
        validate_property(IoK8sApiEventsV1beta1EventSeries, Symbol("lastObservedTime"), lastObservedTime)
        setfield!(o, Symbol("lastObservedTime"), lastObservedTime)
        validate_property(IoK8sApiEventsV1beta1EventSeries, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        o
    end
end # type IoK8sApiEventsV1beta1EventSeries

const _property_map_IoK8sApiEventsV1beta1EventSeries = Dict{Symbol,Symbol}(Symbol("count")=>Symbol("count"), Symbol("lastObservedTime")=>Symbol("lastObservedTime"), Symbol("state")=>Symbol("state"))
const _property_types_IoK8sApiEventsV1beta1EventSeries = Dict{Symbol,String}(Symbol("count")=>"Int32", Symbol("lastObservedTime")=>"IoK8sApimachineryPkgApisMetaV1MicroTime", Symbol("state")=>"String")
Base.propertynames(::Type{ IoK8sApiEventsV1beta1EventSeries }) = collect(keys(_property_map_IoK8sApiEventsV1beta1EventSeries))
Swagger.property_type(::Type{ IoK8sApiEventsV1beta1EventSeries }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_IoK8sApiEventsV1beta1EventSeries[name]))}
Swagger.field_name(::Type{ IoK8sApiEventsV1beta1EventSeries }, property_name::Symbol) =  _property_map_IoK8sApiEventsV1beta1EventSeries[property_name]

function check_required(o::IoK8sApiEventsV1beta1EventSeries)
    (getproperty(o, Symbol("count")) === nothing) && (return false)
    (getproperty(o, Symbol("lastObservedTime")) === nothing) && (return false)
    (getproperty(o, Symbol("state")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiEventsV1beta1EventSeries }, name::Symbol, val)
end
