# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IoK8sApiCoreV1ServiceSpec <: SwaggerModel
    clusterIP::Union{ Nothing, String } # clusterIP
    externalIPs::Union{ Nothing, Vector{String} } # externalIPs
    externalName::Union{ Nothing, String } # externalName
    externalTrafficPolicy::Union{ Nothing, String } # externalTrafficPolicy
    healthCheckNodePort::Union{ Nothing, Int32 } # healthCheckNodePort
    loadBalancerIP::Union{ Nothing, String } # loadBalancerIP
    loadBalancerSourceRanges::Union{ Nothing, Vector{String} } # loadBalancerSourceRanges
    ports::Union{ Nothing, Vector{IoK8sApiCoreV1ServicePort} } # ports
    publishNotReadyAddresses::Union{ Nothing, Bool } # publishNotReadyAddresses
    selector::Union{ Nothing, Dict{String, String} } # selector
    sessionAffinity::Union{ Nothing, String } # sessionAffinity
    sessionAffinityConfig::Union{ Nothing, IoK8sApiCoreV1SessionAffinityConfig } # sessionAffinityConfig
    _type::Union{ Nothing, String } # type

    function IoK8sApiCoreV1ServiceSpec(;clusterIP=nothing, externalIPs=nothing, externalName=nothing, externalTrafficPolicy=nothing, healthCheckNodePort=nothing, loadBalancerIP=nothing, loadBalancerSourceRanges=nothing, ports=nothing, publishNotReadyAddresses=nothing, selector=nothing, sessionAffinity=nothing, sessionAffinityConfig=nothing, _type=nothing)
        o = new()
        set_field!(o, :clusterIP, clusterIP)
        set_field!(o, :externalIPs, externalIPs)
        set_field!(o, :externalName, externalName)
        set_field!(o, :externalTrafficPolicy, externalTrafficPolicy)
        set_field!(o, :healthCheckNodePort, healthCheckNodePort)
        set_field!(o, :loadBalancerIP, loadBalancerIP)
        set_field!(o, :loadBalancerSourceRanges, loadBalancerSourceRanges)
        set_field!(o, :ports, ports)
        set_field!(o, :publishNotReadyAddresses, publishNotReadyAddresses)
        set_field!(o, :selector, selector)
        set_field!(o, :sessionAffinity, sessionAffinity)
        set_field!(o, :sessionAffinityConfig, sessionAffinityConfig)
        set_field!(o, :_type, _type)
        o
    end
end # type IoK8sApiCoreV1ServiceSpec

const _name_map_IoK8sApiCoreV1ServiceSpec = Dict{String,Symbol}(["clusterIP"=>:clusterIP, "externalIPs"=>:externalIPs, "externalName"=>:externalName, "externalTrafficPolicy"=>:externalTrafficPolicy, "healthCheckNodePort"=>:healthCheckNodePort, "loadBalancerIP"=>:loadBalancerIP, "loadBalancerSourceRanges"=>:loadBalancerSourceRanges, "ports"=>:ports, "publishNotReadyAddresses"=>:publishNotReadyAddresses, "selector"=>:selector, "sessionAffinity"=>:sessionAffinity, "sessionAffinityConfig"=>:sessionAffinityConfig, "type"=>:_type])
const _field_map_IoK8sApiCoreV1ServiceSpec = Dict{Symbol,String}([:clusterIP=>"clusterIP", :externalIPs=>"externalIPs", :externalName=>"externalName", :externalTrafficPolicy=>"externalTrafficPolicy", :healthCheckNodePort=>"healthCheckNodePort", :loadBalancerIP=>"loadBalancerIP", :loadBalancerSourceRanges=>"loadBalancerSourceRanges", :ports=>"ports", :publishNotReadyAddresses=>"publishNotReadyAddresses", :selector=>"selector", :sessionAffinity=>"sessionAffinity", :sessionAffinityConfig=>"sessionAffinityConfig", :_type=>"type"])
Swagger.name_map(::Type{ IoK8sApiCoreV1ServiceSpec }) = _name_map_IoK8sApiCoreV1ServiceSpec
Swagger.field_map(::Type{ IoK8sApiCoreV1ServiceSpec }) = _field_map_IoK8sApiCoreV1ServiceSpec

function check_required(o::IoK8sApiCoreV1ServiceSpec)
    true
end

function validate_field(o::IoK8sApiCoreV1ServiceSpec, name::Symbol, val)
end
